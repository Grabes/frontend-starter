// =============================================================================
// Unit converters
// =============================================================================

//converts px value(s) to vw using specified breakpoint px width as a base
@function unit-vw($values, $breakpoint: mobile, $useDesignBreakpoints: true) {

  $breakpointWidth: $breakpoint;
  @if type-of($breakpoint) == string {
    $breakpointWidth: breakpoint-px($breakpoint, $useDesignBreakpoints);
  }
  $breakpointWidth: strip-units($breakpointWidth);

  $length: length($values);
  $newValues: ();

  @if $length > 0 {
    @each $value in $values {
      $newValue: (strip-units($value) * 100 / $breakpointWidth) * 1vw;
      $newValues: append($newValues, $newValue, space);
    }
  }
  @else {
    $newValues: 0vw;
  }

  @return $newValues;
}

//converts px value(s) to percent
@function unit-pc($values, $breakpoint: mobile, $useDesignBreakpoints: true) {
  $breakpointWidth: $breakpoint;
  @if type-of($breakpoint) == string {
    $breakpointWidth: breakpoint-px($breakpoint, $useDesignBreakpoints);
  }
  $breakpointWidth: strip-units($breakpointWidth);

  $length: length($values);
  $newValues: ();

  @each $value in $values {
    $newValue: percentage((strip-units($value) / $breakpointWidth));
    $newValues: append($newValues, $newValue, space);
  }

  @return $newValues;
}



// =============================================================================
// Grid
// =============================================================================

@mixin grid-cont($gutter) {
  $fs-grid-last-gutter: $gutter !global;
  
  $gutter: $gutter/2;
  padding-left: $gutter;
  padding-right: $gutter;
}

@mixin grid-row($gutter: null, $clearfix: true) {
  
  @if ($gutter == null) {
    $gutter: $fs-grid-last-gutter;
  }
  
  $gutter: $gutter/2;

  @if ($clearfix) {
    @include clearfix;
  }
  margin-left: -$gutter;
  margin-right: -$gutter;
}

@mixin grid-col($width, $gutter: null) {
  @if ($gutter == null) {
    $gutter: $fs-grid-last-gutter;
  }

  $gutter: $gutter/2;

  float: left;
  width: $width;
  padding-left: $gutter;
  padding-right: $gutter;
}



// =============================================================================
// Responsive sprites
// =============================================================================

//used for sprite wrapper
@mixin sprite-wrap-rwd($sprite) {
  $image-width: nth($sprite, 5);
  width: $image-width;
  max-width: 100%;
}

//used for sprite container
@mixin sprite-rwd($sprite) {
  @include sprite-image($sprite);

  $sprite-width: strip-units($spritesheet-width);
  $sprite-height: strip-units($spritesheet-height);
  $image-width: strip-units(nth($sprite, 5));
  $image-height: strip-units(nth($sprite, 6));
  $image-pos-x: strip-units(nth($sprite, 1));
  $image-pos-y: strip-units(nth($sprite, 2));
  $sprite-size-x: ($sprite-width / $image-width) * 100%;
  $sprite-size-y: ($sprite-height / $image-height) * 100%;
  $sprite-pos-x: 0;
  $sprite-pos-y: 0;
  @if(($sprite-width - $image-width) > 0) {
     $sprite-pos-x: ($image-pos-x / ($sprite-width - $image-width)) * 100%;
  }
  @if(($sprite-height - $image-height) > 0) {
     $sprite-pos-y: ($image-pos-y / ($sprite-height - $image-height)) * 100%;
  }


  background-position: $sprite-pos-x $sprite-pos-y;
  background-size: $sprite-size-x $sprite-size-y;
  background-repeat: no-repeat;

  display: inline-block;
  width: 100%;
  height: 0;
  padding-bottom: ($image-height/$image-width) * 100%;
}



// =============================================================================
// Internal
// =============================================================================

//returns breakpoint width in px
@function breakpoint-px($breakpoint: mobile, $useDesignBreakpoints: true) {

  @if $useDesignBreakpoints and map-has-key($design-breakpoints, $breakpoint) {
    $breakpointWidth: map-get($design-breakpoints, $breakpoint);
  }
  @else {

    @if ($breakpoint == mobile) {
      @return $fs-mobile-max;
    }
    @elseif ($breakpoint == mobile-sm) {
      @return $fs-mobile-sm-max;
    }
    @else if ($breakpoint == tablet) {
      @return $fs-tablet-max;
    }
    @else if ($breakpoint == tablet-sm) {
      @return $fs-tablet-sm-max;
    }
    @else if ($breakpoint == desktop) {
      @return $fs-desktop-min;
    }
  }
}

//strips units from value
@function strip-units($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}
